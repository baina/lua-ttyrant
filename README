--- Project --------------------------------------------------------------------------------------------------

    LUA-TTYRANT

    A Lua binding to the C API of the TokyoTyrant key-value database server.
    Written by Valeriu Paloş (Copyright 2010).

--- Description ----------------------------------------------------------------------------------------------

    Lua-ttyrant is a binding to the C API of the TokyoTyrant server (visit http://fallabs.com/) for the Lua
    programming language. I have seen several attempts on the net to build a TokyoTyrant library straight in
    Lua (implementing the tyrant/memcache protocol) but I feel that is an unnatural approach since Lua was
    especially designed to work *with* C and not to avoid it. Further more, by using the actual TokyoTyrant C
    API library this implementation is less likely to produce protocol errors or to fall behind any upgrades
    made by Mikio Hirabayashi (the TokyoTyrant creator).

    The goal of lua-ttyrant is to be a stable, binary-safe and complete binding of the Tyrant C API in Lua.
    For the moment I use TokyoTyrant version 1.1.41 as the reference API.

--- License --------------------------------------------------------------------------------------------------

    Copyright 2010 Valeriu Paloş. All rights reserved.

    Redistribution and use in source and binary forms, with or without modification, are
    permitted provided that the following conditions are met:

       1. Redistributions of source code must retain the above copyright notice, this list of
          conditions and the following disclaimer.

       2. Redistributions in binary form must reproduce the above copyright notice, this list
          of conditions and the following disclaimer in the documentation and/or other materials
          provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY VALERIU PALOŞ ``AS IS'' AND ANY EXPRESS OR IMPLIED
    WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
    FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL VALERIU PALOŞ OR
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
    ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
    ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    The views and conclusions contained in the software and documentation are those of the
    authors and should not be interpreted as representing official policies, either expressed
    or implied, of Valeriu Paloş.

--- Prerequisites --------------------------------------------------------------------------------------------

    To compile lua-ttyrant you will need the following progams compiled/installed on your system:

    1. GCC and friends
    2. pkg-config
    3. lua 5.1 (header files)
    4. bzip2 (header files)
    5. zlib (header files)

       These should be provided by all major Linux distribution via their respective repositories.
       On Debian/Ubuntu-based systems you can install all of them by issuing the following command:

       $ sudo apt-get install build-essential pkg-config lua5.1 liblua5.1-0-dev zlib1g-dev libbz2-dev

    6. TokyoCabinet (http://fallabs.com/tokyocabinet/)
    7. TokyoTyrant (http://fallabs.com/tokyotyrant/)

       You should download these two packages from their websites and then compile them each (in order)
       using the classic compilation procedure:

       $ ./configure
       $ make
       $ sudo make install

       If you would like to install these as packages (.deb, .rpm etc.) you can change the last command
       (i.e. sudo make install) to run via the CheckInstall program like so:

       $ sudo checkinstall make install

       CheckInstall shoudl be provided by your Linux distribution and I recommend using it.

--- Usage/Testing --------------------------------------------------------------------------------------------

    To compile this library, you need to run make in the lua-ttyrant directory (you may have to check
    'makefile' first). This will produce a file called ttyrant.so which you can place in your program's
    directory or anywhere where Lua can find it (see Lua documentation on 'cpath' for more details on this).

    $ make

    To run the set of tests you will first have to start two instances of ttserver: one for a regular (hash)
    database (on port 1978) and another for a table database (on port 1979), like this:

    $ ttserver -port 1978 /tmp/test.tch &
    $ ttserver -port 1979 /tmp/test.tct &

    The run the tests via make:

    $ make test

    At the end you can stop the tyrant instances and delete the generated files like this:

    $ killall ttserver
    $ rm -rf /tmp/test.tc?

--- Documentation --------------------------------------------------------------------------------------------

    The lua-ttyrant library is a *binding* which means that it actually "transports" the functions provided
    by the original C API into the Lua language. Therefore you only need to consult two resources in order to
    use it:

    1. The TokyoTyrant API reference (http://fallabs.com/tokyotyrant/spex.html).
    2. The 'ttyrant-test.lua' file which contains test cases for every implemented API function.

    There are however, as the tests show, a few differences from the original API. These are outlined below:

    --> Some functions were ported with different names into Lua. For example:

        tcrdbputcat()       -> ttyrant:append()
        tcrdbtblputcat()    -> ttyrant.table:append()
        tcrdbqryaddcond()   -> ttyrant.query:filter()
        tcrdbqrysetlimit()  -> ttyrant.query:limit()
        tcrdbqrysetorder()  -> ttyrant.query:order()

    --> The functions tcrdbecode() and tcrdberrmsg() are not present in the binding; instead all functions
        that can fail, will return <nil, 'error string'> on failure (as is customary in Lua).

    --> The functionality usually provided in C by the tcrdbmisc() function (i.e. bulk operations) is merged
        straight in the get(), put() and out() methods of the ttyrant class, all of which can act on a whole
        set of keys/values, given as a table or a list (see the test cases for examples).

    --> The function variants ending in '2' (for strings) make no sense in Lua since the values are always
        implicitly converted into strings.

    --> Since Lua make no difference between integers and doubles, the functions tcrdbaddint() and
        tcrdbadddouble() are merged into the function(s) ttyrant:increment() and ttyrant.table:increment().

    --> Some functions were only used internally (e.g. tcrdbqryrescols()) since they have no meaning for Lua.

--- Status ---------------------------------------------------------------------------------------------------

    The library is still in development meaning that the API has not been fully implemented yet. However
    it is already quite stable and my company actually uses it in production from 2 Xavante-based servers.
    Right now I am actively working on it and I will (hopefully) have it completed quite soon.

    Functions not yet supported (they are removed from this list as they are implemented):

    - tcrdbputkeep()

    - tcrdbputshl()
    - tcrdbputnr()
    - tcrdbget3()
    - tcrdbvsiz()
    - tcrdbiterinit()
    - tcrdbiternext()
    - tcrdbfwmkeys()
    - tcrdbext()
    - tcrdbsync()
    - tcrdboptimize()
    - tcrdbvanish()
    - tcrdbcopy()
    - tcrdbrestore()
    - tcrdbsetmst()/tcrdbsetmst2()
    - tcrdbrnum()
    - tcrdbsize()
    - tcrdbstat()
    - tcrdbtblputkeep()
    - tcrdbtblsetindex()
    - tcrdbtblgenuid()
    - tcrdbqryhint()
    - tcrdbmetasearch()
    - tcrdbparasearch()

--- End ------------------------------------------------------------------------------------------------------
